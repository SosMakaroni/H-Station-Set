grf {
	grfid: "HS\19\20";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESC);
	version: 10;
	min_compatible_version: 5722;
/*	param 0 {
        param_cost_factor {
            type: int;
            name: string(STR_PARAM_BUY_NAME);
            desc: string(STR_PARAM_BUY_DESC);
            min_value: 0;
            max_value: 4;
            def_value: 2;
            names: {
					0: string(STR_PARAM_GAME_VERY_EASY);
                    1: string(STR_PARAM_GAME_EASY);
					2: string(STR_PARAM_GAME_NORMAL);
					3: string(STR_PARAM_GAME_HARD);
					4: string(STR_PARAM_GAME_VERY_HARD);
                    };
				}
			}
	param 1 {
		param_running_cost_factor {
            type: int;
            name: string(STR_PARAM_MAINTENANCE_NAME);
            desc: string(STR_PARAM_MAINTENANCE_DESC);
            min_value: 0;
            max_value: 4;
            def_value: 2;
            names: {
					0: string(STR_PARAM_GAME_VERY_EASY);
                    1: string(STR_PARAM_GAME_EASY);
					2: string(STR_PARAM_GAME_NORMAL);
					3: string(STR_PARAM_GAME_HARD);
					4: string(STR_PARAM_GAME_VERY_HARD);
                    };
				}
			}
	param 2 {
		param_cargo_capacity {
            type: int;
            name: string(STR_PARAM_CARGOC_NAME);
            desc: string(STR_PARAM_CARGOC_DESC);
            min_value: 0;
            max_value: 3;
            def_value: 0;
            names: {
					0: string(STR_PARAM_CARGOC_1);
                    1: string(STR_PARAM_CARGOC_2);
					2: string(STR_PARAM_CARGOC_4);
					3: string(STR_PARAM_CARGOC_8);
                    };
				}
			}*/

}

/*paracapa = (param_cargo_capacity == 1) ? 2 : (param_cargo_capacity == 2) ? 4 : (param_cargo_capacity == 3) ? 8 : 1;
parapuco = (param_cost_factor == 1) ? 2 : (param_cost_factor == 2) ? 4 : (param_cost_factor == 3) ? 8 : (param_cost_factor == 4) ? 16 : 1;
pararuco = (param_running_cost_factor == 1) ? 2 : (param_running_cost_factor == 2) ? 4 : (param_running_cost_factor == 3) ? 8 : (param_running_cost_factor == 4) ? 16 : 1;
*/
tramtypetable  {
	RAIL,	//SIMA
	NBAN,	//Ufibi's Improved
	NIAN,	//Ufibi's ISR
	ELRL,	//FELSOVEZETEK
	NBAE,	//Ufibi's Improved (EL)
	NUAE,	//Ufibi's Urban (EL)
	NUBE,	//Ufibi's Modern Urban (EL)
	NUCE,	//Ufibi's Green (EL)
	NIAN	//Ufibi's ISR (EL)
}

cargotable {
PASS, COAL, MAIL, OIL_, LVST, GOOD, GRAI, WOOD, IORE, STEL, VALU, PAPR, WHEA, FOOD, GOLD,RUBR, FRUT, MAIZ, CORE, WATR, DIAM, SUGR, AORE, BDMT, BEAN, BEER, BOOM, BRCK, CBLK,CERA, CERE, CLAY, CMNT, COPR, CSTI, CTAR, DYES, ENSP, FECR, FERT, FICR, FISH, FMSP, GLAS, GRVL, JAVA, KAOL, LIME, MILK, OLSD, PEAT, PETR, PHOS, PLAS, PORE, POTA, TOUR, TYRE, URAN, VEHI, WDPR, WOOL, ZINC, ACID, ALUM, BAKE, CASS, CHLO, CHSE, CIGR, COAT, COBL, COKE, ELTR, EOIL, FRVG, FUEL, FURN, IRON, LYE_, MEAT, METL, MNO2, MNSP, MOLS, MPTS, NH3_, NUTS, NICK, NITR, NKOR, NUKF, NUKW, OILI, OILD, OTI1, OTI2, OYST, O2__, PCL_, PIPE, POWR, QLME, RCYC, SALT, SASH, SEED, SESP, SGBT, SGCN, SLAG, SOAP, STAL, STCB, STSE, STSH, STST, STWR, TATO, TEXT, TBCO, TWOD, VBOD, VENG, VPTS, WSTE
/*
//PASSENGERS CLASS
PASS, TOUR, 
//MAIL CLASS
MAIL,
//EXPRESS CLASS
GOOD,
//ARMOURED CLASS
VALU, GOLD, DIAM, 
//BULK CLASS
COAL, GRAI,  IORE, WHEA, MAIZ, CORE, SUGR, AORE, BEAN, GRVL, LIME, SAND, SCMT, 
//PIECE GOODS CLASS
LVST, WOOD, STEL, PAPR,  COPR, METL, 
//LIQUID CLASS
OIL_, RUBR, WATR, PETR, RFPR, 
//EXPRESS + REFRIGERATED CLASS
FOOD, FISH, MEAT, 
//BULK + REFRIGERATED CLASS
FRUT, 
//BULK + COVERED CLASS
CLAY, CMNT, OLSD, 
//BULK + PIECE CLASS
FERT, FICR, WDPR, RCYC, 
//HAZARDOUS CLASS

//PIECE GOODS + COVERED CLASS
BDMT, WOOL, TEXT, 
//OVERSIZED CLASS

//PIECE + OVERSIZED CLASS
GLAS, VEHI, 
//POWDERIZED CLASS (COVER)

//EXPRESS + LIQUID + REFRIGERATED
MILK, 
//EXPRESS + PIECE + LOQUID CLASS
BEER, 
//EXPRESS + PIECE CLASS
BOOM, ENSP, FMSP, JAVA, VPTS, VENG, VBOD,*/
}


/*template tmpl_purchase() {
	[0,	0,	99,	25,	-25,-15]}
template tmpl_depo() {
	[98,	0,	90,	25,	-13,-15]}	
template tmpl_1(z1){
	[0		*z1,	0,	11	*z1,	49	*z1,	-5	*z1,	-13	*z1,	ANIM]
	[19		*z1,	0,	54	*z1,	40	*z1,	-45	*z1,	-12	*z1,	ANIM]
	[81		*z1,	0,	69	*z1,	15	*z1,	-54	*z1,	-10	*z1,	ANIM]
	[158	*z1,	0,	54	*z1,	40	*z1,	-41	*z1,	-29	*z1,	ANIM]
	[220	*z1,	0,	11	*z1,	49	*z1,	-6	*z1,	-32	*z1,	ANIM]
	[239	*z1,	0,	54	*z1,	40	*z1,	-15	*z1,	-28	*z1,	ANIM]
	[301	*z1,	0,	69	*z1,	15	*z1,	-11	*z1,	-9	*z1,	ANIM]
	[378	*z1,	0,	54	*z1,	40	*z1,	-8	*z1,	-14	*z1,	ANIM]}
*/
template tmpl_station1(sor, oszlop, jobb, magas){
	[70		*oszlop,	130	*sor,	64,	125,	jobb -31,	magas -94,	ANIM]}

template tmpl_toldat() {
	[0,	0,	2,	2,	1,	1]}	

spriteset(ss_toldat, "src/icons.png")		{tmpl_toldat()}

template tmpl_semmi() {
	[0,	0,	2,	2,	1,	1]
	[0,	0,	2,	2,	1,	1]
	[0,	0,	2,	2,	1,	1]
	[0,	0,	2,	2,	1,	1]
	[0,	0,	2,	2,	1,	1]
	[0,	0,	2,	2,	1,	1]
	[0,	0,	2,	2,	1,	1]
	[0,	0,	2,	2,	1,	1]}

//Wood logo, replaces ł 0x0142
font_glyph (NORMAL, 0x0142, "src/icons.png") {[20,80,24,10,0,0]}
font_glyph (SMALL, 0x0142, "src/icons.png") {[10,80,1,1,0,0]}
font_glyph (LARGE, 0x0142, "src/icons.png") {[10,80,1,1,0,0]}
font_glyph (MONO, 0x0142, "src/icons.png") {[10,80,1,1,0,0]}

//Trailer logo, replaces Ł 0x0141
font_glyph (NORMAL, 0x0141, "src/icons.png") {[60,80,29,10,0,0]}
font_glyph (SMALL, 0x0141, "src/icons.png") {[10,80,1,1,0,0]}
font_glyph (LARGE, 0x0141, "src/icons.png") {[10,80,1,1,0,0]}
font_glyph (MONO, 0x0141, "src/icons.png") {[10,80,1,1,0,0]}

//Double logo, replaces đ 0x0111
font_glyph (NORMAL, 0x0111, "src/icons.png") {[110,80,29,10,0,0]}
font_glyph (SMALL, 0x0111, "src/icons.png") {[10,80,1,1,0,0]}
font_glyph (LARGE, 0x0111, "src/icons.png") {[10,80,1,1,0,0]}
font_glyph (MONO, 0x0111, "src/icons.png") {[10,80,1,1,0,0]}

//Triple logo, replaces Đ 0x0110
font_glyph (NORMAL, 0x0110, "src/icons.png") {[160,80,25,10,0,0]}
font_glyph (SMALL, 0x0110, "src/icons.png") {[10,80,1,1,0,0]}
font_glyph (LARGE, 0x0110, "src/icons.png") {[10,80,1,1,0,0]}
font_glyph (MONO, 0x0110, "src/icons.png") {[10,80,1,1,0,0]}

//Twin logo, replaces Ń 0x0143
font_glyph (NORMAL, 0x0143, "src/icons.png") {[20,110,21,10,0,0]}
font_glyph (SMALL, 0x0143, "src/icons.png") {[10,80,1,1,0,0]}
font_glyph (LARGE, 0x0143, "src/icons.png") {[10,80,1,1,0,0]}
font_glyph (MONO, 0x0143, "src/icons.png") {[10,80,1,1,0,0]}

// --------------------------------------------------------------------------------A1

spriteset(building_A1_BUY, "src/prontetoV_32bpp_BASE.png")		{tmpl_station1(0,0)}  // Vásárlási nézet

spriteset(building_A1_X1, "src/prontetoV_32bpp_BASE.png")		{tmpl_station1(0,0,0,0)} // sor, oszlop, jobbra+, le+
spriteset(building_A1_X2, "src/prontetoV_32bpp_BASE.png")		{tmpl_station1(0,1,-22,-11)}
spriteset(building_A1_X3, "src/prontetoV_32bpp_BASE.png")		{tmpl_station1(0,4,0,14)}
spriteset(building_A1_Y1, "src/prontetoV_32bpp_BASE.png")		{tmpl_station1(0,2,0,0)}
spriteset(building_A1_Y2, "src/prontetoV_32bpp_BASE.png")		{tmpl_station1(0,3,22,-11)}
spriteset(building_A1_Y3, "src/prontetoV_32bpp_BASE.png")		{tmpl_station1(0,5,0,14)}

spritelayout A1_X {
    ground {
        sprite: GROUNDSPRITE_RAIL_X; //Talaj sprite
    }
    building {
        sprite: building_A1_X1;
		xoffset:	0;			// Modell / kezdő pont 1/16 - Poziciót dupla ennyivel fel, és ennyivel jobbra
		yoffset:	0;			// Modell \ kezdő pont 1/16 - Poziciót dupla ennyivel fel, és ennyivel balra
		zoffset:	0;			// Modell magasság kezdő pont - Poziciót ennyivel lejebb
		xextent:	16;			// Modell / végső pont 1/16
		yextent:	5;			// Modell \ végső pont 1/16
		zextent:	14;			// Modell magasság végső pont
    }
    building {
        sprite: building_A1_X2;
		xoffset:	0;			// Modell / kezdő pont 1/16 - Poziciót dupla ennyivel fel, és ennyivel jobbra
		yoffset:	11;			// Modell \ kezdő pont 1/16 - Poziciót dupla ennyivel fel, és ennyivel balra
		zoffset:	0;			// Modell magasság kezdő pont - Poziciót ennyivel lejebb
		xextent:	16;			// Modell / végső pont 1/16
		yextent:	5;			// Modell \ végső pont 1/16
		zextent:	14;			// Modell magasság végső pont
    }
    building {
        sprite: building_A1_X3;
		xoffset:	0;			// Modell / kezdő pont 1/16 - Poziciót dupla ennyivel fel, és ennyivel jobbra
		yoffset:	0;			// Modell \ kezdő pont 1/16 - Poziciót dupla ennyivel fel, és ennyivel balra
		zoffset:	14;			// Modell magasság kezdő pont - Poziciót ennyivel lejebb
		xextent:	16;			// Modell / végső pont 1/16
		yextent:	16;			// Modell \ végső pont 1/16
		zextent:	16;			// Modell magasság végső pont
    }
}

spritelayout A1_Y {
    ground {
        sprite: GROUNDSPRITE_RAIL_Y; //Talaj sprite
    }
    building {
        sprite: building_A1_Y1;
		xoffset:	0;			// Modell / kezdő pont 1/16 - Poziciót dupla ennyivel fel, és ennyivel jobbra
		yoffset:	0;			// Modell \ kezdő pont 1/16 - Poziciót dupla ennyivel fel, és ennyivel balra
		zoffset:	0;			// Modell magasság kezdő pont - Poziciót ennyivel lejebb
		xextent:	5;			// Modell / végső pont 1/16
		yextent:	16;			// Modell \ végső pont 1/16
		zextent:	14;			// Modell magasság végső pont
    }
    building {
        sprite: building_A1_Y2;
		xoffset:	11;			// Modell / kezdő pont 1/16 - Poziciót dupla ennyivel fel, és ennyivel jobbra
		yoffset:	0;			// Modell \ kezdő pont 1/16 - Poziciót dupla ennyivel fel, és ennyivel balra
		zoffset:	0;			// Modell magasság kezdő pont - Poziciót ennyivel lejebb
		xextent:	5;			// Modell / végső pont 1/16
		yextent:	16;			// Modell \ végső pont 1/16
		zextent:	14;			// Modell magasság végső pont
    }
    building {
        sprite: building_A1_Y3;
		xoffset:	0;			// Modell / kezdő pont 1/16 - Poziciót dupla ennyivel fel, és ennyivel jobbra
		yoffset:	0;			// Modell \ kezdő pont 1/16 - Poziciót dupla ennyivel fel, és ennyivel balra
		zoffset:	14;			// Modell magasság kezdő pont - Poziciót ennyivel lejebb
		xextent:	16;			// Modell / végső pont 1/16
		yextent:	16;			// Modell \ végső pont 1/16
		zextent:	16;			// Modell magasság végső pont
    }
}

item(FEAT_STATIONS, A1) {
    property {
        class: "HSSE";
        classname: string(STR_NAME_STATION_CLASS);		// Állomás csoport név
        name: string(STR_NAME_A1);		// Állomás név

//        disabled_platforms: bitmask(2, 3, 4, 5, 6, 7, 8);		// Letiltott peronszám
//        disabled_length: bitmask(2, 3, 4, 5, 6, 7, 8);		// Letiltott peronhossz
        draw_pylon_tiles: 0;		//még nem tudom mi ez
        hide_wire_tiles: 0;		// Felősvezeték eltűntetése (0 nem, 1 igen)
//        non_traversable_tiles: 0xFF;		// Nem járható peron
    }

    graphics {
        sprite_layouts: [A1_X, A1_Y];		// Irányok X jobbra fel, Y jobbra le
    }
}